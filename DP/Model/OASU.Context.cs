//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DP.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OASUEntity : DbContext
    {
        public OASUEntity()
            : base("name=OASUEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccesRights> AccesRights { get; set; }
        public virtual DbSet<Computers> Computers { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Developers> Developers { get; set; }
        public virtual DbSet<Documents> Documents { get; set; }
        public virtual DbSet<DocumentTypes> DocumentTypes { get; set; }
        public virtual DbSet<Employees> Employees { get; set; }
        public virtual DbSet<Offices> Offices { get; set; }
        public virtual DbSet<PrgLangs> PrgLangs { get; set; }
        public virtual DbSet<PrgSystems> PrgSystems { get; set; }
        public virtual DbSet<Professions> Professions { get; set; }
        public virtual DbSet<RecordHistories> RecordHistories { get; set; }
        public virtual DbSet<SubSystems> SubSystems { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<Workplaces> Workplaces { get; set; }
    
        public virtual int import_department(string name_Dep, Nullable<int> dep_ID, Nullable<int> remove)
        {
            var name_DepParameter = name_Dep != null ?
                new ObjectParameter("Name_Dep", name_Dep) :
                new ObjectParameter("Name_Dep", typeof(string));
    
            var dep_IDParameter = dep_ID.HasValue ?
                new ObjectParameter("Dep_ID", dep_ID) :
                new ObjectParameter("Dep_ID", typeof(int));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("import_department", name_DepParameter, dep_IDParameter, removeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int WorkplaceConnectToComputer(Nullable<int> workplace_ID, Nullable<int> computer_ID)
        {
            var workplace_IDParameter = workplace_ID.HasValue ?
                new ObjectParameter("Workplace_ID", workplace_ID) :
                new ObjectParameter("Workplace_ID", typeof(int));
    
            var computer_IDParameter = computer_ID.HasValue ?
                new ObjectParameter("Computer_ID", computer_ID) :
                new ObjectParameter("Computer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkplaceConnectToComputer", workplace_IDParameter, computer_IDParameter);
        }
    
        public virtual ObjectResult<WrkToComp_Result> WrkToComp(Nullable<int> workplace_ID, Nullable<int> computer_ID)
        {
            var workplace_IDParameter = workplace_ID.HasValue ?
                new ObjectParameter("Workplace_ID", workplace_ID) :
                new ObjectParameter("Workplace_ID", typeof(int));
    
            var computer_IDParameter = computer_ID.HasValue ?
                new ObjectParameter("Computer_ID", computer_ID) :
                new ObjectParameter("Computer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WrkToComp_Result>("WrkToComp", workplace_IDParameter, computer_IDParameter);
        }
    
        public virtual int DELETE_WrkToComp(Nullable<int> workplace_ID, Nullable<int> computer_ID)
        {
            var workplace_IDParameter = workplace_ID.HasValue ?
                new ObjectParameter("Workplace_ID", workplace_ID) :
                new ObjectParameter("Workplace_ID", typeof(int));
    
            var computer_IDParameter = computer_ID.HasValue ?
                new ObjectParameter("Computer_ID", computer_ID) :
                new ObjectParameter("Computer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_WrkToComp", workplace_IDParameter, computer_IDParameter);
        }
    
        public virtual int INSERT_WrkToComp(Nullable<int> workplace_ID, Nullable<int> computer_ID)
        {
            var workplace_IDParameter = workplace_ID.HasValue ?
                new ObjectParameter("Workplace_ID", workplace_ID) :
                new ObjectParameter("Workplace_ID", typeof(int));
    
            var computer_IDParameter = computer_ID.HasValue ?
                new ObjectParameter("Computer_ID", computer_ID) :
                new ObjectParameter("Computer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_WrkToComp", workplace_IDParameter, computer_IDParameter);
        }
    
        public virtual ObjectResult<SELECT_WrkToComp_Result> SELECT_WrkToComp(Nullable<int> workplace_ID, Nullable<int> computer_ID)
        {
            var workplace_IDParameter = workplace_ID.HasValue ?
                new ObjectParameter("Workplace_ID", workplace_ID) :
                new ObjectParameter("Workplace_ID", typeof(int));
    
            var computer_IDParameter = computer_ID.HasValue ?
                new ObjectParameter("Computer_ID", computer_ID) :
                new ObjectParameter("Computer_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_WrkToComp_Result>("SELECT_WrkToComp", workplace_IDParameter, computer_IDParameter);
        }
    
        public virtual int DELETE_ARTU(Nullable<int> user_ID, Nullable<int> pS_ID, Nullable<int> accesRightID, Nullable<int> sub_System_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var pS_IDParameter = pS_ID.HasValue ?
                new ObjectParameter("PS_ID", pS_ID) :
                new ObjectParameter("PS_ID", typeof(int));
    
            var accesRightIDParameter = accesRightID.HasValue ?
                new ObjectParameter("AccesRightID", accesRightID) :
                new ObjectParameter("AccesRightID", typeof(int));
    
            var sub_System_IDParameter = sub_System_ID.HasValue ?
                new ObjectParameter("Sub_System_ID", sub_System_ID) :
                new ObjectParameter("Sub_System_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DELETE_ARTU", user_IDParameter, pS_IDParameter, accesRightIDParameter, sub_System_IDParameter);
        }
    
        public virtual int INSERT_ARTU(Nullable<int> user_ID, Nullable<int> accesRightID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var accesRightIDParameter = accesRightID.HasValue ?
                new ObjectParameter("AccesRightID", accesRightID) :
                new ObjectParameter("AccesRightID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("INSERT_ARTU", user_IDParameter, accesRightIDParameter);
        }
    
        public virtual ObjectResult<SELECT_ARTU_Result> SELECT_ARTU(Nullable<int> user_ID, Nullable<int> pS_ID, Nullable<int> accesRightID, Nullable<int> sub_System_ID)
        {
            var user_IDParameter = user_ID.HasValue ?
                new ObjectParameter("User_ID", user_ID) :
                new ObjectParameter("User_ID", typeof(int));
    
            var pS_IDParameter = pS_ID.HasValue ?
                new ObjectParameter("PS_ID", pS_ID) :
                new ObjectParameter("PS_ID", typeof(int));
    
            var accesRightIDParameter = accesRightID.HasValue ?
                new ObjectParameter("AccesRightID", accesRightID) :
                new ObjectParameter("AccesRightID", typeof(int));
    
            var sub_System_IDParameter = sub_System_ID.HasValue ?
                new ObjectParameter("Sub_System_ID", sub_System_ID) :
                new ObjectParameter("Sub_System_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SELECT_ARTU_Result>("SELECT_ARTU", user_IDParameter, pS_IDParameter, accesRightIDParameter, sub_System_IDParameter);
        }
    
        public virtual int IMPORT_DEPARTMENTS(string name_Department, Nullable<int> department_ID, Nullable<int> remove, ObjectParameter @lock)
        {
            var name_DepartmentParameter = name_Department != null ?
                new ObjectParameter("Name_Department", name_Department) :
                new ObjectParameter("Name_Department", typeof(string));
    
            var department_IDParameter = department_ID.HasValue ?
                new ObjectParameter("Department_ID", department_ID) :
                new ObjectParameter("Department_ID", typeof(int));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_DEPARTMENTS", name_DepartmentParameter, department_IDParameter, removeParameter, @lock);
        }
    
        public virtual int IMPORT_EMPLOYEES(string full_Name_Employee, Nullable<int> personnel_Number, Nullable<int> profession_ID, Nullable<int> remove, ObjectParameter @lock)
        {
            var full_Name_EmployeeParameter = full_Name_Employee != null ?
                new ObjectParameter("Full_Name_Employee", full_Name_Employee) :
                new ObjectParameter("Full_Name_Employee", typeof(string));
    
            var personnel_NumberParameter = personnel_Number.HasValue ?
                new ObjectParameter("Personnel_Number", personnel_Number) :
                new ObjectParameter("Personnel_Number", typeof(int));
    
            var profession_IDParameter = profession_ID.HasValue ?
                new ObjectParameter("Profession_ID", profession_ID) :
                new ObjectParameter("Profession_ID", typeof(int));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_EMPLOYEES", full_Name_EmployeeParameter, personnel_NumberParameter, profession_IDParameter, removeParameter, @lock);
        }
    
        public virtual int IMPORT_OFFICES(Nullable<int> department_ID, Nullable<int> backward_ID, string name_Office, Nullable<int> remove, ObjectParameter @lock)
        {
            var department_IDParameter = department_ID.HasValue ?
                new ObjectParameter("Department_ID", department_ID) :
                new ObjectParameter("Department_ID", typeof(int));
    
            var backward_IDParameter = backward_ID.HasValue ?
                new ObjectParameter("Backward_ID", backward_ID) :
                new ObjectParameter("Backward_ID", typeof(int));
    
            var name_OfficeParameter = name_Office != null ?
                new ObjectParameter("Name_Office", name_Office) :
                new ObjectParameter("Name_Office", typeof(string));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_OFFICES", department_IDParameter, backward_IDParameter, name_OfficeParameter, removeParameter, @lock);
        }
    
        public virtual int IMPORT_PROFESSIONS(string name_Profession, Nullable<int> profession_ID, Nullable<int> remove, ObjectParameter @lock)
        {
            var name_ProfessionParameter = name_Profession != null ?
                new ObjectParameter("Name_Profession", name_Profession) :
                new ObjectParameter("Name_Profession", typeof(string));
    
            var profession_IDParameter = profession_ID.HasValue ?
                new ObjectParameter("Profession_ID", profession_ID) :
                new ObjectParameter("Profession_ID", typeof(int));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_PROFESSIONS", name_ProfessionParameter, profession_IDParameter, removeParameter, @lock);
        }
    
        public virtual int FASTEXEC(string text)
        {
            var textParameter = text != null ?
                new ObjectParameter("text", text) :
                new ObjectParameter("text", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FASTEXEC", textParameter);
        }
    
        public virtual int IMPORT_EMPLOYEE_PLACEMENT(Nullable<int> department_ID, Nullable<int> backward_ID, Nullable<int> personnel_Number, Nullable<int> remove, ObjectParameter @lock)
        {
            var department_IDParameter = department_ID.HasValue ?
                new ObjectParameter("Department_ID", department_ID) :
                new ObjectParameter("Department_ID", typeof(int));
    
            var backward_IDParameter = backward_ID.HasValue ?
                new ObjectParameter("Backward_ID", backward_ID) :
                new ObjectParameter("Backward_ID", typeof(int));
    
            var personnel_NumberParameter = personnel_Number.HasValue ?
                new ObjectParameter("Personnel_Number", personnel_Number) :
                new ObjectParameter("Personnel_Number", typeof(int));
    
            var removeParameter = remove.HasValue ?
                new ObjectParameter("Remove", remove) :
                new ObjectParameter("Remove", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IMPORT_EMPLOYEE_PLACEMENT", department_IDParameter, backward_IDParameter, personnel_NumberParameter, removeParameter, @lock);
        }
    
        public virtual ObjectResult<AccesRightToUsers_Proc_Result> AccesRightToUsers_Proc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccesRightToUsers_Proc_Result>("AccesRightToUsers_Proc");
        }
    
        public virtual ObjectResult<WorkplaceToComputers_Proc_Result> WorkplaceToComputers_Proc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WorkplaceToComputers_Proc_Result>("WorkplaceToComputers_Proc");
        }
    }
}
